name: Build Java App with Maven, Push Docker Image to Docker Hub, and Scan Code with SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the project using Maven and run SonarCloud scan
      - name: Build with Maven
        run: mvn clean install

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar \
          -Dsonar.projectKey=victordgr8t \
          -Dsonar.organization=victormodebe \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Step 5: Determine Docker tag
      - name: Determine Docker Tag
        id: tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      # Step 6: Build Docker image for Spring PetClinic
      - name: Build Docker image
        run: docker build -t spring-petclinic:${{ env.TAG }} .

      # Step 7: Log in to Docker Hub using credentials stored as GitHub Secrets
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Step 8: Tag the Docker image for Docker Hub
      - name: Tag Docker image
        run: docker tag spring-petclinic:${{ env.TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/spring-petclinic:${{ env.TAG }}

      # Step 9: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-petclinic:${{ env.TAG }}
